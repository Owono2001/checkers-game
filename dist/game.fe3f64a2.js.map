{"mappings":"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","sources":["<anon>","game.ts"],"sourcesContent":["(() => {\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire94c2\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire94c2\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"4msXI\", function(module, exports) {\nclass $02e0c8ac8aa6bbdd$var$CheckersGame {\n    constructor(){\n        this.boardSize = 8;\n        this.pieces = [];\n        this.selectedPiece = null;\n        this.currentPlayer = 'black';\n        this.validMoves = [];\n        this.canvas = document.getElementById('game-board');\n        this.ctx = this.canvas.getContext('2d');\n        this.cellSize = this.canvas.width / this.boardSize;\n        this.initBoard();\n        this.drawBoard();\n        this.setupEventListeners();\n    }\n    initBoard() {\n        this.pieces = [];\n        for(let row = 0; row < this.boardSize; row++){\n            for(let col = 0; col < this.boardSize; col++)if ((row + col) % 2 === 1) {\n                if (row < 3) this.pieces.push({\n                    color: 'white',\n                    king: false,\n                    x: col,\n                    y: row\n                });\n                else if (row > 4) this.pieces.push({\n                    color: 'black',\n                    king: false,\n                    x: col,\n                    y: row\n                });\n            }\n        }\n    }\n    drawBoard() {\n        // Draw board squares\n        for(let row = 0; row < this.boardSize; row++)for(let col = 0; col < this.boardSize; col++){\n            this.ctx.fillStyle = (row + col) % 2 === 0 ? '#f0d9b5' : '#b58863';\n            this.ctx.fillRect(col * this.cellSize, row * this.cellSize, this.cellSize, this.cellSize);\n        }\n        // Draw pieces\n        this.pieces.forEach((piece)=>{\n            this.ctx.beginPath();\n            this.ctx.arc(piece.x * this.cellSize + this.cellSize / 2, piece.y * this.cellSize + this.cellSize / 2, this.cellSize / 2.5, 0, Math.PI * 2);\n            this.ctx.fillStyle = piece.color === 'black' ? '#2c3e50' : '#ecf0f1';\n            this.ctx.fill();\n            if (piece.king) {\n                this.ctx.fillStyle = piece.color === 'black' ? '#f1c40f' : '#f39c12';\n                this.ctx.beginPath();\n                this.ctx.arc(piece.x * this.cellSize + this.cellSize / 2, piece.y * this.cellSize + this.cellSize / 2, this.cellSize / 6, 0, Math.PI * 2);\n                this.ctx.fill();\n            }\n        });\n        // Highlight selected piece and valid moves\n        if (this.selectedPiece) {\n            this.ctx.fillStyle = 'rgba(46, 204, 113, 0.3)';\n            this.ctx.fillRect(this.selectedPiece.x * this.cellSize, this.selectedPiece.y * this.cellSize, this.cellSize, this.cellSize);\n            this.validMoves.forEach((move)=>{\n                this.ctx.beginPath();\n                this.ctx.arc(move.x * this.cellSize + this.cellSize / 2, move.y * this.cellSize + this.cellSize / 2, this.cellSize / 6, 0, Math.PI * 2);\n                this.ctx.fillStyle = 'rgba(46, 204, 113, 0.6)';\n                this.ctx.fill();\n            });\n        }\n    }\n    getValidMoves(piece) {\n        const moves = [];\n        const directions = piece.king ? [\n            -1,\n            1\n        ] : piece.color === 'black' ? [\n            -1\n        ] : [\n            1\n        ];\n        directions.forEach((dy)=>{\n            [\n                -1,\n                1\n            ].forEach((dx)=>{\n                const newX = piece.x + dx;\n                const newY = piece.y + dy;\n                if (this.isValidPosition(newX, newY)) {\n                    const targetPiece = this.getPieceAt(newX, newY);\n                    if (!targetPiece) moves.push({\n                        x: newX,\n                        y: newY\n                    });\n                    else if (targetPiece.color !== piece.color) {\n                        const jumpX = newX + dx;\n                        const jumpY = newY + dy;\n                        if (this.isValidPosition(jumpX, jumpY) && !this.getPieceAt(jumpX, jumpY)) moves.push({\n                            x: jumpX,\n                            y: jumpY\n                        });\n                    }\n                }\n            });\n        });\n        return moves;\n    }\n    hasMandatoryCaptures() {\n        return this.pieces.some((piece)=>piece.color === this.currentPlayer && this.getValidMoves(piece).some((move)=>Math.abs(move.x - piece.x) === 2));\n    }\n    isValidPosition(x, y) {\n        return x >= 0 && x < this.boardSize && y >= 0 && y < this.boardSize;\n    }\n    getPieceAt(x, y) {\n        return this.pieces.find((p)=>p.x === x && p.y === y);\n    }\n    handleClick(event) {\n        const rect = this.canvas.getBoundingClientRect();\n        const x = Math.floor((event.clientX - rect.left) / this.cellSize);\n        const y = Math.floor((event.clientY - rect.top) / this.cellSize);\n        const clickedPiece = this.getPieceAt(x, y);\n        const hasMandatoryCaptures = this.hasMandatoryCaptures();\n        if (clickedPiece && clickedPiece.color === this.currentPlayer) {\n            const pieceMoves = this.getValidMoves(clickedPiece);\n            const pieceCaptures = pieceMoves.filter((move)=>Math.abs(move.x - clickedPiece.x) === 2);\n            if (hasMandatoryCaptures) {\n                if (pieceCaptures.length > 0) {\n                    this.selectedPiece = clickedPiece;\n                    this.validMoves = pieceCaptures;\n                }\n            } else {\n                this.selectedPiece = clickedPiece;\n                this.validMoves = pieceMoves;\n            }\n        } else if (this.selectedPiece) {\n            const move = this.validMoves.find((m)=>m.x === x && m.y === y);\n            if (move) {\n                const wasCapture = Math.abs(move.x - this.selectedPiece.x) === 2;\n                this.movePiece(this.selectedPiece, move.x, move.y);\n                if (wasCapture) {\n                    const newCaptures = this.getValidMoves(this.selectedPiece).filter((m)=>Math.abs(m.x - this.selectedPiece.x) === 2);\n                    if (newCaptures.length > 0) this.validMoves = newCaptures;\n                    else this.endTurn();\n                } else this.endTurn();\n            }\n        }\n        this.drawBoard();\n    }\n    movePiece(piece, newX, newY) {\n        if (Math.abs(newX - piece.x) === 2) {\n            const capturedX = (newX + piece.x) / 2;\n            const capturedY = (newY + piece.y) / 2;\n            this.pieces = this.pieces.filter((p)=>!(p.x === capturedX && p.y === capturedY));\n        }\n        piece.x = newX;\n        piece.y = newY;\n        if (piece.color === 'black' && newY === 0 || piece.color === 'white' && newY === 7) piece.king = true;\n    }\n    endTurn() {\n        this.selectedPiece = null;\n        this.validMoves = [];\n        this.currentPlayer = this.currentPlayer === 'black' ? 'white' : 'black';\n        this.updateTurnIndicator();\n        this.checkWinCondition();\n    }\n    updateTurnIndicator() {\n        document.getElementById('turn-indicator').textContent = `${this.currentPlayer.charAt(0).toUpperCase() + this.currentPlayer.slice(1)}'s Turn`;\n    }\n    checkWinCondition() {\n        const blackPieces = this.pieces.filter((p)=>p.color === 'black');\n        const whitePieces = this.pieces.filter((p)=>p.color === 'white');\n        if (blackPieces.length === 0) {\n            alert('White wins!');\n            this.resetGame();\n        } else if (whitePieces.length === 0) {\n            alert('Black wins!');\n            this.resetGame();\n        }\n    }\n    resetGame() {\n        this.pieces = [];\n        this.currentPlayer = 'black';\n        this.selectedPiece = null;\n        this.validMoves = [];\n        this.initBoard();\n        this.drawBoard();\n        this.updateTurnIndicator();\n    }\n    setupEventListeners() {\n        this.canvas.addEventListener('click', (e)=>this.handleClick(e));\n        document.getElementById('reset-btn').addEventListener('click', ()=>this.resetGame());\n    }\n}\nnew $02e0c8ac8aa6bbdd$var$CheckersGame();\n\n});\n\n\nparcelRequire(\"4msXI\");\n})();\n//# sourceMappingURL=game.fe3f64a2.js.map\n","type Piece = {\r\n    color: 'black' | 'white';\r\n    king: boolean;\r\n    x: number;\r\n    y: number;\r\n};\r\n\r\ntype Position = {\r\n    x: number;\r\n    y: number;\r\n};\r\n\r\n\r\n\r\nclass CheckersGame {\r\n    private canvas: HTMLCanvasElement;\r\n    private ctx: CanvasRenderingContext2D;\r\n    private boardSize = 8;\r\n    private cellSize: number;\r\n    private pieces: Piece[] = [];\r\n    private selectedPiece: Piece | null = null;\r\n    private currentPlayer: 'black' | 'white' = 'black';\r\n    private validMoves: Position[] = [];\r\n\r\n    constructor() {\r\n        this.canvas = document.getElementById('game-board') as HTMLCanvasElement;\r\n        this.ctx = this.canvas.getContext('2d')!;\r\n        this.cellSize = this.canvas.width / this.boardSize;\r\n        \r\n        this.initBoard();\r\n        this.drawBoard();\r\n        this.setupEventListeners();\r\n    }\r\n\r\n    private initBoard(): void {\r\n        this.pieces = [];\r\n        for (let row = 0; row < this.boardSize; row++) {\r\n            for (let col = 0; col < this.boardSize; col++) {\r\n                if ((row + col) % 2 === 1) {\r\n                    if (row < 3) {\r\n                        this.pieces.push({ color: 'white', king: false, x: col, y: row });\r\n                    } else if (row > 4) {\r\n                        this.pieces.push({ color: 'black', king: false, x: col, y: row });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    private drawBoard(): void {\r\n        // Draw board squares\r\n        for (let row = 0; row < this.boardSize; row++) {\r\n            for (let col = 0; col < this.boardSize; col++) {\r\n                this.ctx.fillStyle = (row + col) % 2 === 0 ? '#f0d9b5' : '#b58863';\r\n                this.ctx.fillRect(col * this.cellSize, row * this.cellSize, this.cellSize, this.cellSize);\r\n            }\r\n        }\r\n\r\n        // Draw pieces\r\n        this.pieces.forEach(piece => {\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(\r\n                piece.x * this.cellSize + this.cellSize / 2,\r\n                piece.y * this.cellSize + this.cellSize / 2,\r\n                this.cellSize / 2.5,\r\n                0,\r\n                Math.PI * 2\r\n            );\r\n            \r\n            this.ctx.fillStyle = piece.color === 'black' ? '#2c3e50' : '#ecf0f1';\r\n            this.ctx.fill();\r\n            \r\n            if (piece.king) {\r\n                this.ctx.fillStyle = piece.color === 'black' ? '#f1c40f' : '#f39c12';\r\n                this.ctx.beginPath();\r\n                this.ctx.arc(\r\n                    piece.x * this.cellSize + this.cellSize / 2,\r\n                    piece.y * this.cellSize + this.cellSize / 2,\r\n                    this.cellSize / 6,\r\n                    0,\r\n                    Math.PI * 2\r\n                );\r\n                this.ctx.fill();\r\n            }\r\n        });\r\n\r\n        // Highlight selected piece and valid moves\r\n        if (this.selectedPiece) {\r\n            this.ctx.fillStyle = 'rgba(46, 204, 113, 0.3)';\r\n            this.ctx.fillRect(\r\n                this.selectedPiece.x * this.cellSize,\r\n                this.selectedPiece.y * this.cellSize,\r\n                this.cellSize,\r\n                this.cellSize\r\n            );\r\n\r\n            this.validMoves.forEach(move => {\r\n                this.ctx.beginPath();\r\n                this.ctx.arc(\r\n                    move.x * this.cellSize + this.cellSize / 2,\r\n                    move.y * this.cellSize + this.cellSize / 2,\r\n                    this.cellSize / 6,\r\n                    0,\r\n                    Math.PI * 2\r\n                );\r\n                this.ctx.fillStyle = 'rgba(46, 204, 113, 0.6)';\r\n                this.ctx.fill();\r\n            });\r\n        }\r\n    }\r\n\r\n    private getValidMoves(piece: Piece): Position[] {\r\n        const moves: Position[] = [];\r\n        const directions = piece.king ? [-1, 1] : piece.color === 'black' ? [-1] : [1];\r\n        \r\n        directions.forEach(dy => {\r\n            [-1, 1].forEach(dx => {\r\n                const newX = piece.x + dx;\r\n                const newY = piece.y + dy;\r\n                \r\n                if (this.isValidPosition(newX, newY)) {\r\n                    const targetPiece = this.getPieceAt(newX, newY);\r\n                    if (!targetPiece) {\r\n                        moves.push({ x: newX, y: newY });\r\n                    } else if (targetPiece.color !== piece.color) {\r\n                        const jumpX = newX + dx;\r\n                        const jumpY = newY + dy;\r\n                        if (this.isValidPosition(jumpX, jumpY) && !this.getPieceAt(jumpX, jumpY)) {\r\n                            moves.push({ x: jumpX, y: jumpY });\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        });\r\n        \r\n        return moves;\r\n    }\r\n\r\n    private hasMandatoryCaptures(): boolean {\r\n        return this.pieces.some(piece => \r\n            piece.color === this.currentPlayer && \r\n            this.getValidMoves(piece).some(move => Math.abs(move.x - piece.x) === 2)\r\n        );\r\n    }\r\n\r\n    private isValidPosition(x: number, y: number): boolean {\r\n        return x >= 0 && x < this.boardSize && y >= 0 && y < this.boardSize;\r\n    }\r\n\r\n    private getPieceAt(x: number, y: number): Piece | undefined {\r\n        return this.pieces.find(p => p.x === x && p.y === y);\r\n    }\r\n\r\n    private handleClick(event: MouseEvent): void {\r\n        const rect = this.canvas.getBoundingClientRect();\r\n        const x = Math.floor((event.clientX - rect.left) / this.cellSize);\r\n        const y = Math.floor((event.clientY - rect.top) / this.cellSize);\r\n        \r\n        const clickedPiece = this.getPieceAt(x, y);\r\n        const hasMandatoryCaptures = this.hasMandatoryCaptures();\r\n        \r\n        if (clickedPiece && clickedPiece.color === this.currentPlayer) {\r\n            const pieceMoves = this.getValidMoves(clickedPiece);\r\n            const pieceCaptures = pieceMoves.filter(move => Math.abs(move.x - clickedPiece.x) === 2);\r\n            \r\n            if (hasMandatoryCaptures) {\r\n                if (pieceCaptures.length > 0) {\r\n                    this.selectedPiece = clickedPiece;\r\n                    this.validMoves = pieceCaptures;\r\n                }\r\n            } else {\r\n                this.selectedPiece = clickedPiece;\r\n                this.validMoves = pieceMoves;\r\n            }\r\n        } else if (this.selectedPiece) {\r\n            const move = this.validMoves.find(m => m.x === x && m.y === y);\r\n            if (move) {\r\n                const wasCapture = Math.abs(move.x - this.selectedPiece.x) === 2;\r\n                this.movePiece(this.selectedPiece, move.x, move.y);\r\n                \r\n                if (wasCapture) {\r\n                    const newCaptures = this.getValidMoves(this.selectedPiece)\r\n                        .filter(m => Math.abs(m.x - this.selectedPiece!.x) === 2);\r\n                    \r\n                    if (newCaptures.length > 0) {\r\n                        this.validMoves = newCaptures;\r\n                    } else {\r\n                        this.endTurn();\r\n                    }\r\n                } else {\r\n                    this.endTurn();\r\n                }\r\n            }\r\n        }\r\n        \r\n        this.drawBoard();\r\n    }\r\n\r\n    private movePiece(piece: Piece, newX: number, newY: number): void {\r\n        if (Math.abs(newX - piece.x) === 2) {\r\n            const capturedX = (newX + piece.x) / 2;\r\n            const capturedY = (newY + piece.y) / 2;\r\n            this.pieces = this.pieces.filter(p => !(p.x === capturedX && p.y === capturedY));\r\n        }\r\n\r\n        piece.x = newX;\r\n        piece.y = newY;\r\n\r\n        if ((piece.color === 'black' && newY === 0) || (piece.color === 'white' && newY === 7)) {\r\n            piece.king = true;\r\n        }\r\n    }\r\n\r\n    private endTurn(): void {\r\n        this.selectedPiece = null;\r\n        this.validMoves = [];\r\n        this.currentPlayer = this.currentPlayer === 'black' ? 'white' : 'black';\r\n        this.updateTurnIndicator();\r\n        this.checkWinCondition();\r\n    }\r\n\r\n    private updateTurnIndicator(): void {\r\n        document.getElementById('turn-indicator')!.textContent = \r\n            `${this.currentPlayer.charAt(0).toUpperCase() + this.currentPlayer.slice(1)}'s Turn`;\r\n    }\r\n\r\n    private checkWinCondition(): void {\r\n        const blackPieces = this.pieces.filter(p => p.color === 'black');\r\n        const whitePieces = this.pieces.filter(p => p.color === 'white');\r\n        \r\n        if (blackPieces.length === 0) {\r\n            alert('White wins!');\r\n            this.resetGame();\r\n        } else if (whitePieces.length === 0) {\r\n            alert('Black wins!');\r\n            this.resetGame();\r\n        }\r\n    }\r\n\r\n    private resetGame(): void {\r\n        this.pieces = [];\r\n        this.currentPlayer = 'black';\r\n        this.selectedPiece = null;\r\n        this.validMoves = [];\r\n        this.initBoard();\r\n        this.drawBoard();\r\n        this.updateTurnIndicator();\r\n    }\r\n\r\n    private setupEventListeners(): void {\r\n        this.canvas.addEventListener('click', (e) => this.handleClick(e));\r\n        document.getElementById('reset-btn')!.addEventListener('click', () => this.resetGame());\r\n    }\r\n}\r\n\r\nnew CheckersGame();"],"names":["$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","constructor","boardSize","pieces","selectedPiece","currentPlayer","validMoves","canvas","document","getElementById","ctx","getContext","cellSize","width","initBoard","drawBoard","setupEventListeners","row","col","push","color","king","x","y","fillStyle","fillRect","forEach","piece","beginPath","arc","Math","PI","fill","move","getValidMoves","moves","directions","dy","dx","newX","newY","isValidPosition","targetPiece","getPieceAt","jumpX","jumpY","hasMandatoryCaptures","some","abs","find","p","handleClick","event","rect","getBoundingClientRect","floor","clientX","left","clientY","top","clickedPiece","pieceMoves","pieceCaptures","filter","length","m","wasCapture","movePiece","newCaptures","endTurn","capturedX","capturedY","updateTurnIndicator","checkWinCondition","textContent","charAt","toUpperCase","slice","blackPieces","whitePieces","alert","resetGame","addEventListener","e"],"version":3,"file":"game.fe3f64a2.js.map"}